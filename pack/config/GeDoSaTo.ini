# Lines starting with "#" are ignored by GeDoSaTo and used to provide documentation
# read them before changing anything!

########################################################################################
# Internal settings

# The amount of logging output for debugging purpose.
# Should be set to 0 if everything works fine for performance reasons.
logLevel 0

########################################################################################
# Graphics settings

# The actual rendering resolution you want to use,
# and how many Hz you want the game to think it works at.
renderWidth 7680
renderHeight 4320
#renderWidth 5120
#renderHeight 2880
#renderWidth 3840
#renderHeight 2160
#renderWidth 3200
#renderHeight 1800
#renderWidth 2560
#renderHeight 1440
reportedHz 60

# The resolution you want to downsample *to*.
# Should generally always be your output device pixel size and frequency.
# Writing something not supported by the display here will probably cause a crash.
presentWidth 2560
presentHeight 1440
#presentWidth 1920
#presentHeight 1080
#presentWidth 1280
#presentHeight 720
presentHz 60

# How many vertical traces to wait when presenting
# -1 = unchanged
# 0 = no vsync
# 1 = standard vsync
# 2 = half refresh rate (e.g. 30 on 60 Hz)
# 3 = 1/3rd refresh rate, etc.
presentInterval -1

# The type of scaling you want to use.
# bilinear: what GPUs generally do, cheap performance-wise
# bicubic: higher quality, more expensive performance-wise
# lanczos: higher quality and sharp, most expensive performance-wise
# nearest: extremely cheap, generally ugly, but useful to upsample retro games
scalingType bilinear

########################################################################################
# Compatibility Settings

# Forces the constant reporting of the downsampling resolution in all applicable
# scenarios - a small selection of games needs this to show the DS resolutions
forceAlwaysDownsamplingRes false

# Emulate exact flipping behaviour
# requires some extra performance/memory,
# but may be important for some games to work
emulateFlipBehaviour false

# Restricts interception to only system dlls
# might increase compatibility with 3rd-party injectors, but decrease stability 
interceptOnlySystemDlls false

# Force disables Steam in-game overlay from getting loaded into the process
# which caused some games to crash, even if it was disabled in Steam settings
preventSteamOverlay false

# Loads Steam overlay early
loadSteamOverlayEarly true

# Loads D3D dlls early - may cause some games to recognize GeDoSaTo which wouldn't otherwise
loadD3DEarly false

# Forces the present resolution to be set, regardless of what the game requests
# usually only makes sense in conjunction with game-specific plugins
# for games with resolution limits
forcePresentRes false

# For games which use strange methods to query resolutions,
# injecting a new one might not work. In such cases, you can try replacing an
# existing resolution. E.g. "overrideWidth 800", "overrideHeight 600" to replace 800x600
# 0 = override disabled
overrideWidth 0
overrideHeight 0

########################################################################################
# Windowing settings

# Hides the mouse cursor, at all times
# options: "true" (= hidden) and "false" (= unchanged)
hideMouseCursor false

# Forces borderless windowed fullscreen mode instead of fullscreen mode
# options: "true" (= force borderless windowed FS) and "false" (= unchanged)
forceBorderlessFullscreen false

########################################################################################
# Image processing settings
# Note: may or may not apply depending on the plugin used

## AA

# AA toggle and quality setting
# 0 = off (best performance, worst IQ)
# 1 = low 
# 2 = medium
# 3 = high
# 4 = ultra (worst performance, best IQ)
aaQuality 3

# AA type
# either "smaa" or "fxaa", depending on your preferences
aaType fxaa

## SSAO

# Enable and set the strength of the SSAO effect 
# (all 3 settings have the same performance impact!)
# 0 = off
# 1 = low
# 2 = medium
# 3 = high
ssaoStrength 2

# Set SSAO scale
# 1 = high quality (default)
# 2 = lower quality, lower impact on performance
ssaoScale 1

# Set SSAO Blur type
# gaussian = soft, cheap
# sharp = depth-dependent, more expensive
ssaoBlurType gaussian

## DOF

# Enable Depth of Field
# false = off
# true = on
enableDoF false

# Select the type of DOF effect
# basic = basic pseudo-Bokeh DoF
# bokeh = shaped circular Bokeh DoF - WARNING: high performance impact
dofType bokeh

# Bokeh Depth of Field radius
# default = 1.00
# higher = more blurry (e.g. 1.1)
# lower = less blurry (e.g. 0.9)
# note: small changes make a large difference
dofBaseRadius 1.05

## Post

# Enable Postprocessing
# false = off
# true = on
# For in-depth configuration, look in "assets/post.fx" or "assets/post_asmodean.fx"
enablePostprocessing true

# Postprocessing type
# durante = basic postprocessing adapted from SweetFX (dark, local contrast)
# asmodean = postprocessing by Asmodean (with tone mapping, softer)
# For in-depth configuration, look in "assets/post.fx" or "assets/post_asmodean.fx"
postProcessingType durante

## Bloom

# Enable HDR Bloom
# false = off
# true = on
# For in-depth configuration, look in "assets/bloom.fx"
enableBloom true

########################################################################################
# Texture settings

# Dump game textures loaded using d3dx to textures\[gamename]\dump\[hash].tga
# if you enable override at the same time, the overridden texture will be dumped
enableTextureDumping false

# Override game textures loaded using d3dx with those from
# textures\[gamename]\override\[hash].(dds|png), if available
enableTextureOverride false

# Mark textures with their hash (for texture modders)
# WARNING: extremely slow if a game loads many textures
# (if you think a game crashed, it's probably still just loading textures)
enableTextureMarking false

########################################################################################
# Mouse settings
# you may have to play around with these a bit to get mouse input working correctly
# while downsampling in some games

# Modify the mouse position reported by "GetCursorPos" when downsampling
modifyGetCursorPos false

# Modify the mouse position set by "SetCursorPos" when downsampling
modifySetCursorPos false

# Intercept the WindowProc callback of the game and adjust mouse messages when downsampling
interceptWindowProc false

# Adjust the mouse position reported in peeked Windows messages when downsampling
adjustMessagePt false
